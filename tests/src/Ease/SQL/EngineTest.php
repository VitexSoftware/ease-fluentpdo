<?php

namespace Test\Ease\SQL;

use Ease\SQL\Engine;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2020-05-10 at 14:47:05.
 */
class EngineTest extends \PHPUnit\Framework\TestCase {

    /**
     * @var Engine
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void {
        $this->object = new Engine(null, ['myTable' => 'test', 'createColumn' => 'created']);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown(): void {
        
    }

    /**
     * Test Constructor
     *
     * @covers Ease\SQL\Engine::__construct
     */
    public function testConstructor() {
        $classname = get_class($this->object);

        // Get mock, without the constructor being called
        $mock = $this->getMockBuilder($classname)
                ->disableOriginalConstructor()
                ->getMockForAbstractClass();
        $mock->__construct(null, ['debug' => false]);
        $mock->__construct(1, ['autoload' => true, 'myTable' => 'test']);
        $this->assertEquals('a', $mock->getDataValue('value'));
        $mock->__construct(['key' => 'bar'], ['autoload' => true, 'myTable' => 'test']);
        $this->assertEquals('b', $mock->getDataValue('value'));
        $mock->__construct('b', ['autoload' => true, 'myTable' => 'test', 'keyColumn' => 'value']);
        $this->assertEquals(2, $mock->getDataValue('id'));
    }

    /**
     * @covers Ease\SQL\Engine::getRecordName
     */
    public function testGetRecordName() {
        $this->assertEquals('', $this->object->GetRecordName());
    }

    /**
     * @covers Ease\SQL\Engine::setmyTable
     */
    public function testSetmyTable() {
        $this->assertEquals('', $this->object->setmyTable('test'));
    }

    /**
     * @covers Ease\SQL\Engine::getMyTable
     */
    public function testGetMyTable() {
        $this->object->setmyTable('test');
        $this->assertEquals('test', $this->object->getMyTable());
    }

    /**
     * @covers Ease\SQL\Engine::searchColumns
     */
    public function testSearchColumns() {
        $this->assertNotEmpty( $this->object->searchColumns('bar', ['key'], 1)->fetch());
    }

    /**
     * @covers Ease\SQL\Engine::getAll
     */
    public function testGetAll() {
        $this->assertArrayHasKey(2, $this->object->getAll());
    }

    /**
     * @covers Ease\SQL\Engine::setUp
     */
    public function testSetUp() {
        $this->assertEquals('', $this->object->setUp());
    }

    /**
     * @covers Ease\SQL\Engine::pdoConnect
     */
    public function testPdoConnect() {
        $this->assertEquals('', $this->object->pdoConnect());
    }

    /**
     * @covers Ease\SQL\Engine::getPdo
     */
    public function testGetPdo() {
        $this->assertEquals('PDO', get_class($this->object->GetPdo()));
    }

    /**
     * @covers Ease\SQL\Engine::getFluentPDO
     */
    public function testGetFluentPDO() {
        $this->assertEquals('', $this->object->GetFluentPDO());
    }

    /**
     * @covers Ease\SQL\Engine::listingQuery
     */
    public function testListingQuery() {
        $this->assertEquals('Envms\FluentPDO\Queries\Select', get_class($this->object->ListingQuery()));
    }

    /**
     * @covers Ease\SQL\Engine::getColumnsFromSQL
     */
    public function testGetColumnsFromSQL() {
        $this->assertEquals('', $this->object->GetColumnsFromSQL(['id']));
    }

    /**
     * @covers Ease\SQL\Engine::getDataFromSQL
     */
    public function testGetDataFromSQL() {
        $this->assertEquals('', $this->object->GetDataFromSQL());
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete('This test has not been implemented yet.');
    }

    /**
     * @covers Ease\SQL\Engine::loadFromSQL
     */
    public function testLoadFromSQL() {
        $this->assertEquals(5, $this->object->loadFromSQL(2));
    }

    /**
     * @covers Ease\SQL\Engine::dbreload
     */
    public function testDbreload() {
        $this->assertEquals('', $this->object->Dbreload());
    }

    /**
     * @covers Ease\SQL\Engine::dbsync
     */
    public function testDbsync() {
        $this->assertEquals('', $this->object->Dbsync());
    }

    /**
     * @covers Ease\SQL\Engine::updateToSQL
     */
    public function testUpdateToSQL() {
        $this->assertEquals('', $this->object->updateToSQL());
    }

    /**
     * @covers Ease\SQL\Engine::saveToSQL
     */
    public function testSaveToSQL() {
        $this->assertEquals('', $this->object->saveToSQL());
    }

    /**
     * @covers Ease\SQL\Engine::insertToSQL
     */
    public function testInsertToSQL() {
        $this->object->setData(['key' => 'xyz', 'value' => 'xxx']);
        $this->assertEquals(3, $this->object->insertToSQL());
        $this->assertEquals(4, $this->object->insertToSQL(['key' => 'cfg', 'value' => 'c']));

        $this->expectException('Envms\FluentPDO\Exception');
        $this->object->insertToSQL(['z' => 'e']);
    }

    /**
     * @covers Ease\SQL\Engine::deleteFromSQL
     */
    public function testDeleteFromSQL() {
        $this->assertEquals('', $this->object->deleteFromSQL());
    }

    /**
     * @covers Ease\SQL\Engine::takeToData
     */
    public function testTakeToData() {
        $this->assertEquals('', $this->object->TakeToData());
    }

}
